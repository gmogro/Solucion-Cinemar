
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import RIGHT, Tk, Canvas, Entry, Text, Button, PhotoImage, Toplevel, Scrollbar
from BDD.creando_bdd import create_connection
from BDD.consulta_usuario import select_usuario_by_id, select_nombre_id_by_nombre


def select_reserva(conn):
    """
    Query all rows in the tasks table
    :param conn: the Connection object
    :param table: table name
    :return:
    """
    cur = conn.cursor()
    cur.execute("SELECT * FROM reserva")

    rows = cur.fetchall()

    return rows

def select_reserva_by_id(conn, id):
    """
    Query all rows in the tasks table
    :param conn: the Connection object
    :param table: table name
    :return:
    """
    cur = conn.cursor()
    cur.execute(f"SELECT * FROM reserva WHERE id_usuario = {id}")

    rows = cur.fetchall()

    return rows

def select_sesion_by_id(conn, id):
    """
    Query all rows in the tasks table
    :param conn: the Connection object
    :param table: table name
    :return:
    """
    cur = conn.cursor()
    cur.execute(f"SELECT * FROM sesion WHERE id_sesion = {id}")

    rows = cur.fetchall()

    return rows

def select_nombre_pelicula_by_id(conn, id):
    """
    Query all rows in the tasks table
    :param conn: the Connection object
    :param table: table name
    :return:
    """
    cur = conn.cursor()
    cur.execute(f"SELECT nombre FROM pelicula WHERE id_pelicula = {id}")

    rows = cur.fetchone()

    return rows[0]

class ClienteReserva(Toplevel):
    OUTPUT_PATH = Path(__file__).parent
    ASSETS_PATH = OUTPUT_PATH / \
        Path("./assets/administracion_ver_reserva_particular")

    def relative_to_assets(self, path: str) -> Path:
        return self.ASSETS_PATH / Path(path)

    def __init__(self, master=None, id_cliente=None):
        super().__init__(master)
        self.id_cliente = id_cliente
        self.master = master
        self.configure(bg="#FFFFFF")
        self.geometry("620x220")
        # Icono del programa
        self.iconbitmap(r'assets\cinemark.ico')
        # Titulo del programa
        self.title("Cinemark")
        self.create_widgets()

    def limpiar_resultado_text_reservas(self):
        self.text_reservas.delete("1.0", "end")


    def mostrar_reserva(self):
        database = r"Cinemark.db"
        # create a database connection
        conn = create_connection(database)
        self.limpiar_resultado_text_reservas()
        reservas = select_reserva_by_id(conn, self.id_cliente)
        for reserva in reservas:
            sesion = select_sesion_by_id(conn, reserva[3])
            pelicula = select_nombre_pelicula_by_id(conn, sesion[0][4])
            self.text_reservas.insert(
                "insert", f"  ${reserva[1]} --  {reserva[2]}  --  {reserva[3]}    --     {reserva[4]}   --  {pelicula} \n")


    def create_widgets(self):
        canvas = Canvas(
            self,
            bg = "#FFFFFF",
            height = 357,
            width = 621,
            bd = 0,
            highlightthickness = 0,
            relief = "ridge"
        )

        canvas.place(x = 0, y = 0)
        canvas.create_text(
            250.0,
            5.0,
            anchor="nw",
            text="Cinemark",
            fill="#11AC0E",
            font=("Inter Bold", 20 * -1)
        )

        canvas.create_text(
            220.0,
            35.0,
            anchor="nw",
            text="Mis Reservas",
            fill="#000000",
            font=("Inter Bold", 15 * -1)
        )

        button_image_salir = PhotoImage(
            file = self.relative_to_assets("button_salir.png"))
        button_salir = Button(
            self,
            image = button_image_salir,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.destroy(),
            relief="flat"
        )
        button_salir.place(
            x=9.0,
            y=180.0,
            width=35.0,
            height=35.0
        )

        self.text_reservas = Text(
            self,
            bd=0,
            bg="#D9D9D9",
            highlightthickness=0
        )
        self.text_reservas.place(
            x=5.0,
            y=75.0,
            width=600.0,
            height=100.0
        )
        # self.mostrar_reserva()

        canvas.create_text(
            5.0,
            55.0,
            anchor="nw",
            text="    Precio    --      Fecha      --    Sesion    --    Butaca     --  Pelicula",
            fill="#000000",
            font=("Inter Bold", 15 * -1)
        )

        self.mostrar_reserva()
        self.resizable(False, False)
        self.mainloop()


if __name__ == "__main__":
    app = ClienteReserva(Tk())
    pass
