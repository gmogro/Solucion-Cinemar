
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path
from datetime import datetime

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, Toplevel, messagebox
from BDD.creando_bdd import create_connection
from Clases.Sala import Sala


class AdministracionCargaSala(Toplevel):
    OUTPUT_PATH = Path(__file__).parent
    ASSETS_PATH = OUTPUT_PATH / Path("./assets/administracion_carga_sala")

    def relative_to_assets(self, path: str) -> Path:
        return self.ASSETS_PATH / Path(path)

    def __init__(self, master=None):
        super().__init__(master)
        self.master = master
        self.configure(bg="#FFFFFF")
        self.geometry("421x220")
        # Icono del programa
        self.iconbitmap(r'assets\cinemark.ico')
        # Titulo del programa
        self.title("Supermarket")
        self.create_widgets()

    def get_numero(self):
        return self.entry_numero.get()

    def get_formato(self):
        return self.entry_formato.get()

    def get_capacidad(self):
        return self.entry_capacidad.get()

    def set_numero(self, numero):
        self.entry_numero.delete(0, 'end')
        self.entry_numero.insert(0, numero)

    def set_formato(self, formato):
        self.entry_formato.delete(0, 'end')
        self.entry_formato.insert(0, formato)

    def set_capacidad(self, capacidad):
        self.entry_capacidad.delete(0, 'end')
        self.entry_capacidad.insert(0, capacidad)

    def confirmar_formato(self):
        return self.get_formato() != ""

    def confirmar_numero(self):
        return self.get_numero() != "" and self.get_numero().isdigit() and int(self.get_numero()) > 0

    def confirmar_capacidad(self):
        return self.get_capacidad() != ""

    def comprobaciones(self):
        if self.confirmar_numero():
            if self.confirmar_formato():
                if self.confirmar_capacidad():
                    return True
                else:
                    messagebox.showinfo(
                        "Error", "La Capacidad no es valida")
            else:
                messagebox.showinfo(
                    "Error", "El formato no es valido")
        else:
            messagebox.showinfo(
                "Error", "El numero no es valido")

    def limpiar_entradas(self):
        self.entry_numero .delete(0, 'end')
        self.entry_formato.delete(0, 'end')
        self.entry_capacidad.delete(0, 'end')

    def crear_sala(self):
        if self.comprobaciones():
            database = r"Cinemark.db"
            # create a database connection
            conn = create_connection(database)

            sala = Sala(self.get_numero(), self.get_formato(), self.get_capacidad())
            sala.insertar_sala(conn)

            messagebox.showinfo("Exito", "Sala creada")
            self.limpiar_entradas()
        else:
            messagebox.showinfo("Error", "No se pudo crear la sala")

    def create_widgets(self):
        canvas = Canvas(
            self,
            bg = "#FFFFFF",
            height = 220,
            width = 421,
            bd = 0,
            highlightthickness = 0,
            relief = "ridge"
        )

        canvas.place(x = 0, y = 0)
        canvas.create_text(
            131.0,
            5.0,
            anchor="nw",
            text="Cinemark",
            fill="#11AC0E",
            font=("Inter Bold", 20 * -1)
        )

        canvas.create_text(
            5.0,
            35.0,
            anchor="nw",
            text="Crear Sala: ",
            fill="#000000",
            font=("Inter Bold", 15 * -1)
        )

        canvas.create_text(
            17.0,
            71.0,
            anchor="nw",
            text="Numero: ",
            fill="#000000",
            font=("Inter Bold", 15 * -1)
        )

        canvas.create_text(
            15.0,
            100.0,
            anchor="nw",
            text="Formato: ",
            fill="#000000",
            font=("Inter Bold", 15 * -1)
        )

        canvas.create_text(
            15.0,
            136.0,
            anchor="nw",
            text="Capacidad: ",
            fill="#000000",
            font=("Inter Bold", 15 * -1)
        )

        self.entry_numero = Entry(
            self,
            bd=0,
            bg="#D9D9D9",
            highlightthickness=0
        )
        self.entry_numero.place(
            x=93.0,
            y=69.0,
            width=152.0,
            height=19.0
        )
        # self.entry_nombre.insert(0, "nombre")

        self.entry_formato = Entry(
            self, 
            bd=0,
            bg="#D9D9D9",
            highlightthickness=0
        )
        self.entry_formato.place(
            x=89.0,
            y=101.0,
            width=152.0,
            height=19.0
        )
        # self.entry_marca.insert(0, "marca")


        self.entry_capacidad = Entry(
            self,
            bd=0,
            bg="#D9D9D9",
            highlightthickness=0
        )
        self.entry_capacidad.place(
            x=169.0,
            y=133.0,
            width=132.0,
            height=19.0
        )
        # self.entry_fecha.insert(0, "fecha")


        button_image_confirmar = PhotoImage(
            file = self.relative_to_assets("button_confirmar.png"))
        button_confirmar = Button(
            self, 
            image = button_image_confirmar,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.crear_sala(),
            relief="flat"
        )
        button_confirmar.place(
            x=165.0,
            y=180.0,
            width=111.0,
            height=29.0
        )

        button_image_salir = PhotoImage(
            file = self.relative_to_assets("button_salir.png"))
        button_salir = Button(
            self,
            image = button_image_salir,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.destroy(),
            relief="flat"
        )
        button_salir.place(
            x=12.0,
            y=180.0,
            width=35.0,
            height=35.0
        )
        self.resizable(False, False)
        self.mainloop()


if __name__ == "__main__":
    app = AdministracionCargaSala()
    pass
