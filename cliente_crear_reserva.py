
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer

from datetime import datetime
from pathlib import Path
from datetime import datetime

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, Toplevel, messagebox
from BDD.creando_bdd import create_connection
from Clases.Reserva import Reserva


def select_id_name_from_pelicula(conn):
    """
    Query all rows in the tasks table
    :param conn: the Connection object
    :param table: table name
    :return:
    """
    cur = conn.cursor()
    cur.execute("SELECT id_pelicula, nombre FROM pelicula")

    rows = cur.fetchall()

    return rows

def select_id_fecha_hora_from_sesion(conn, id_pelicula):
    """
    Query all rows in the tasks table
    :param conn: the Connection object
    :param table: table name
    :return:
    """
    cur = conn.cursor()
    cur.execute("SELECT id_sesion, fecha, hora FROM sesion WHERE id_pelicula = ?", (id_pelicula,))

    rows = cur.fetchall()

    return rows

def select_fecha_from_sesion_by_id(conn, id_sesion):
    """
    Query all rows in the tasks table
    :param conn: the Connection object
    :param table: table name
    :return:
    """
    cur = conn.cursor()
    cur.execute("SELECT fecha FROM sesion WHERE id_sesion = ?", (id_sesion,))

    rows = cur.fetchall()

    return rows

def select_name_usuario_by_id(conn, id_usuario):
    """
    Query all rows in the tasks table
    :param conn: the Connection object
    :param table: table name
    :return:
    """
    cur = conn.cursor()
    cur.execute("SELECT nombre FROM usuario WHERE id_usuario = ?", (id_usuario,))

    rows = cur.fetchall()

    return rows

def select_numero_tarjeta_by_id(conn, id_tarjeta):
    """
    Query all rows in the tasks table
    :param conn: the Connection object
    :param table: table name
    :return:
    """
    cur = conn.cursor()
    cur.execute("SELECT numero FROM tarjeta_credito WHERE id_tarjeta = ?", (id_tarjeta,))

    rows = cur.fetchall()

    return rows

def select_porcentaje_from_descuento_by_id(conn, id_descuento):
    """
    Query all rows in the tasks table
    :param conn: the Connection object
    :param table: table name
    :return:
    """
    cur = conn.cursor()
    cur.execute("SELECT porcentaje FROM descuento WHERE id_descuento = ?", (id_descuento,))

    rows = cur.fetchone()

    return rows

class ClienteCrearReserva(Toplevel):
    descuentos = {
        "Monday": 1,
        "Tuesday": 2,
        "Wednesday": 3,
        "Thursday": 4,
        "Friday": 5,
        "Saturday": 6,
        "Sunday": 7}
    OUTPUT_PATH = Path(__file__).parent
    ASSETS_PATH = OUTPUT_PATH / Path("./assets/administracion_carga_sala")

    def relative_to_assets(self, path: str) -> Path:
        return self.ASSETS_PATH / Path(path)

    def __init__(self, master=None, id_cliente=None):
        super().__init__(master)
        self.master = master
        self.id_cliente = id_cliente
        self.configure(bg="#FFFFFF")
        self.geometry("550x550")
        # Icono del programa
        self.iconbitmap(r'assets\cinemark.ico')
        # Titulo del programa
        self.title("Cinemark")
        self.create_widgets()

    def mostrar_peliculas(self):
        database = r"Cinemark.db"
        # create a database connection
        conn = create_connection(database)
        peliculas = select_id_name_from_pelicula(conn)
        for pelicula in peliculas:
            self.text_peliculas.insert(
                "insert", f"{pelicula[0]} --  {pelicula[1]}\n")
    def limpiar_id_sesion(self):
        self.entry_id_sesion.delete(0, "end")

    def limpiar_id_pelicula(self):
        self.entry_id_pelicula.delete(0, "end")

    def limpiar_peliculas(self):
        self.text_peliculas.delete(1.0, "end")

    def limpiar_sesiones(self):
        self.text_sesiones.delete(1.0, "end")

    def limpiar_reserva(self):
        self.entry_precio.delete(0, "end")
        self.entry_fecha.delete(0, "end")
        self.entry_sesion.delete(0, "end")
        self.entry_usuario.delete(0, "end")
        self.entry_tarjeta.delete(0, "end")
        self.entry_descuento.delete(0, "end")
        self.entry_butaca.delete(0, "end")

    def mostrar_sesiones(self):
        database = r"Cinemark.db"
        # create a database connection
        conn = create_connection(database)
        id_pelicula = self.entry_id_pelicula.get()
        sesiones = select_id_fecha_hora_from_sesion(conn, id_pelicula)
        self.limpiar_sesiones()
        for sesion in sesiones:
            self.text_sesiones.insert(
                "insert", f"{sesion[0]} --  {sesion[1]} -- {sesion[2]}\n")

    def disable_entry(self):
        self.entry_descuento.config(state="disabled")
        self.entry_tarjeta.config(state="disabled")
        self.entry_usuario.config(state="disabled")
        self.entry_precio.config(state="disabled")
        self.entry_fecha.config(state="disabled")
        self.entry_sesion.config(state="disabled")

    def enable_entry(self):
        self.entry_descuento.config(state="normal")
        self.entry_tarjeta.config(state="normal")
        self.entry_usuario.config(state="normal")
        self.entry_precio.config(state="normal")
        self.entry_fecha.config(state="normal")
        self.entry_sesion.config(state="normal")

    def mostrar_reserva(self):
        database = r"Cinemark.db"
        # create a database connection
        conn = create_connection(database)
        self.enable_entry()
        self.limpiar_reserva()
        self.entry_precio.insert("insert", "$500")
        self.entry_fecha.insert("insert", select_fecha_from_sesion_by_id(conn, self.entry_id_sesion.get()))
        self.entry_sesion.insert("insert", self.entry_id_sesion.get())
        self.entry_usuario.insert("insert", select_name_usuario_by_id(conn, self.id_cliente)[0])
        self.entry_tarjeta.insert("insert", select_numero_tarjeta_by_id(conn, self.id_cliente)[0])
        dia = datetime.today().strftime('%A')
        numero_dia = self.descuentos[dia]
        descuento = float(select_porcentaje_from_descuento_by_id(conn, numero_dia)[0])
        self.entry_descuento.insert("insert", f"%{descuento * 100}")
        self.disable_entry()

    def get_butaca(self):
        return self.entry_butaca.get()

    def confirmar_butaca(self):
        return self.get_butaca() != "" and self.get_butaca().isdigit() and int(self.get_butaca()) > 0 and int(self.get_butaca()) < 6

    def comprobaciones(self):
        if self.confirmar_butaca():
            return True
        else:
            messagebox.showinfo(
                    "Error", "El NroÂ° Butaca NO es Valido")

    def crear_reserva(self):
        if self.comprobaciones():
            database = r"Cinemark.db"
            # create a database connection
            conn = create_connection(database)
            precio = self.entry_precio.get()[1:]
            usuario = self.id_cliente
            tarjeta = self.id_cliente
            descuento = self.descuentos[datetime.today().strftime('%A')]
            reserva = Reserva(precio, self.entry_fecha.get(), self.entry_sesion.get(), self.entry_butaca.get(), usuario, tarjeta, descuento)
            reserva.insertar_reserva(conn)
            messagebox.showinfo("Exito", "Reserva creada")
            self.enable_entry()
            self.limpiar_id_sesion()
            self.limpiar_id_pelicula()
            self.limpiar_sesiones()
            self.limpiar_reserva()
        else:
            messagebox.showinfo("Error", "No se pudo crear la Reserva")

    def create_widgets(self):
        canvas = Canvas(
            self,
            bg = "#FFFFFF",
            height = 550,
            width = 500,
            bd = 0,
            highlightthickness = 0,
            relief = "ridge"
        )

        canvas.place(x = 0, y = 0)
        canvas.create_text(
            131.0,
            5.0,
            anchor="nw",
            text="Cinemark",
            fill="#11AC0E",
            font=("Inter Bold", 20 * -1)   
        )

        ####################### Cargar Peliculas ############################
        canvas.create_text(
            5.0,
            25.0,
            anchor="nw",
            text="Ver Peliculas: ",
            fill="#000000",
            font=("Inter Bold", 15 * -1)
        )

        canvas.create_text(
            5.0,
            50.0,
            anchor="nw",
            text=" ID -- Pelicula  ",
            fill="#000000",
            font=("Inter Bold", 15 * -1)
        )

        self.text_peliculas = Text(
            self,
            bd=0,
            bg="#D9D9D9",
            highlightthickness=0
        )
        self.text_peliculas.place(
            x=5.0,
            y=70.0,
            width=350.0,
            height=85.0
        )

        canvas.create_text(
            380.0,
            70.0,
            anchor="nw",
            text="Coloca ID Pelicula: ",
            fill="#000000",
            font=("Inter Bold", 15 * -1)
        )

        self.entry_id_pelicula = Entry(
            self,
            bd=0,
            bg="#D9D9D9",
            highlightthickness=0
        )
        self.entry_id_pelicula.place(
            x=380.0,
            y=95.0,
            width=152.0,
            height=19.0
        )
        button_cargar_sesion = Button(
            self, 
            text = "Cargar Sesion",
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.mostrar_sesiones(),
            relief="flat"
        )
        button_cargar_sesion.place(
            x=380.0,
            y=125.0,
            width=111.0,
            height=29.0
        )

        ####################### Cargar Sesiones ############################

        canvas.create_text(
            5.0,
            163.0,
            anchor="nw",
            text="Ver Sesiones: ",
            fill="#000000",
            font=("Inter Bold", 15 * -1)
        )

        canvas.create_text(
            5.0,
            180.0,
            anchor="nw",
            text=" ID --       Fecha       --  Hora  ",
            fill="#000000",
            font=("Inter Bold", 15 * -1)
        )

        self.text_sesiones = Text(
            self,
            bd=0,
            bg="#D9D9D9",
            highlightthickness=0
        )
        self.text_sesiones.place(
            x=5.0,
            y=200.0,
            width=350.0,
            height=100.0
        )

        canvas.create_text(
            380.0,
            200.0,
            anchor="nw",
            text="Coloca ID Sesion: ",
            fill="#000000",
            font=("Inter Bold", 15 * -1)
        )

        self.entry_id_sesion = Entry(
            self,
            bd=0,
            bg="#D9D9D9",
            highlightthickness=0
        )
        self.entry_id_sesion.place(
            x=380.0,
            y=225.0,
            width=152.0,
            height=19.0
        )
        button_cargar_reserva = Button(
            self, 
            text = "Cargar Reserva",
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.mostrar_reserva(),
            relief="flat"
        )
        button_cargar_reserva.place(
            x=380.0,
            y=250.0,
            width=111.0,
            height=29.0
        )

        ####################### Cargar Reservas ############################

        canvas.create_text(
            5.0,
            305.0,
            anchor="nw",
            text="Crear Reserva: ",
            fill="#000000",
            font=("Inter Bold", 15 * -1)
        )

        canvas.create_text(
            5.0,
            325.0,
            anchor="nw",
            text="Precio: ",
            fill="#000000",
            font=("Inter Bold", 15 * -1)
        )

        self.entry_precio = Entry(
            self,
            bd=0,
            bg="#D9D9D9",
            highlightthickness=0
        )
        self.entry_precio.place(
            x=70.0,
            y=325.0,
            width=152.0,
            height=19.0
        )

        canvas.create_text(
            5.0,
            350.0,
            anchor="nw",
            text="Fecha: ",
            fill="#000000",
            font=("Inter Bold", 15 * -1)
        )

        self.entry_fecha = Entry(
            self,
            bd=0,
            bg="#D9D9D9",
            highlightthickness=0
        )
        self.entry_fecha.place(
            x=70.0,
            y=350.0,
            width=152.0,
            height=19.0
        )

        canvas.create_text(
            5.0,
            375.0,
            anchor="nw",
            text="Sesion: ",
            fill="#000000",
            font=("Inter Bold", 15 * -1)
        )

        self.entry_sesion = Entry(
            self,
            bd=0,
            bg="#D9D9D9",
            highlightthickness=0
        )
        self.entry_sesion.place(
            x=70.0,
            y=375.0,
            width=152.0,
            height=19.0
        )

        canvas.create_text(
            5.0,
            400.0,
            anchor="nw",
            text="Butaca: ",
            fill="#000000",
            font=("Inter Bold", 15 * -1)
        )

        self.entry_butaca = Entry(
            self,
            bd=0,
            bg="#D9D9D9",
            highlightthickness=0
        )
        self.entry_butaca.place(
            x=70.0,
            y=400.0,
            width=152.0,
            height=19.0
        )

        canvas.create_text(
            230.0,
            400.0,
            anchor="nw",
            text="Numero entre 1-5 ",
            fill="#000000",
            font=("Inter Bold", 15 * -1)
        )

        canvas.create_text(
            5.0,
            425.0,
            anchor="nw",
            text="Usuario: ",
            fill="#000000",
            font=("Inter Bold", 15 * -1)
        )

        self.entry_usuario = Entry(
            self,
            bd=0,
            bg="#D9D9D9",
            highlightthickness=0
        )
        self.entry_usuario.place(
            x=70.0,
            y=425.0,
            width=152.0,
            height=19.0
        )

        canvas.create_text(
            5.0,
            450.0,
            anchor="nw",
            text="Tarjeta: ",
            fill="#000000",
            font=("Inter Bold", 15 * -1)
        )

        self.entry_tarjeta = Entry(
            self,
            bd=0,
            bg="#D9D9D9",
            highlightthickness=0
        )
        self.entry_tarjeta.place(
            x=70.0,
            y=450.0,
            width=152.0,
            height=19.0
        )

        canvas.create_text(
            5.0,
            475.0,
            anchor="nw",
            text="Descuento: ",
            fill="#000000",
            font=("Inter Bold", 15 * -1)
        )

        self.entry_descuento = Entry(
            self,
            bd=0,
            bg="#D9D9D9",
            highlightthickness=0
        )
        self.entry_descuento.place(
            x=85.0,
            y=475.0,
            width=152.0,
            height=19.0
        )
        # self.entry_nombre.insert(0, "nombre")

        button_image_confirmar = PhotoImage(
            file = self.relative_to_assets("button_confirmar.png"))
        button_confirmar = Button(
            self, 
            image = button_image_confirmar,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.crear_reserva(),
            relief="flat"
        )
        button_confirmar.place(
            x=165.0,
            y=500.0,
            width=111.0,
            height=29.0
        )

        button_image_salir = PhotoImage(
            file = self.relative_to_assets("button_salir.png"))
        button_salir = Button(
            self,
            image = button_image_salir,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.destroy(),
            relief="flat"
        )
        button_salir.place(
            x=12.0,
            y=500.0,
            width=35.0,
            height=35.0
        )

        self.mostrar_peliculas()
        self.resizable(False, False)
        self.mainloop()


if __name__ == "__main__":
    app = ClienteCrearReserva()
    pass
