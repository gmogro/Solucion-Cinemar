
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, Toplevel, messagebox
from BDD.consulta_usuario import select_nombre_id_by_nombre, select_usuario_by_id
from BDD.creando_bdd import create_connection
from BDD.actualizando_bdd import update_atributo_usuario


class AdministracionModificarUsuario(Toplevel):
    OUTPUT_PATH = Path(__file__).parent
    ASSETS_PATH = OUTPUT_PATH / Path("./assets/administracion_modificar_usuario")

    def relative_to_assets(self, path: str) -> Path:
        return self.ASSETS_PATH / Path(path)

    def __init__(self, master=None):
        super().__init__(master)
        self.master = master
        self.configure(bg="#FFFFFF")
        self.geometry("462x643")
        # Icono del programa
        self.iconbitmap(r'assets\cinemark.ico')
        # Titulo del programa
        self.title("Cinemark")
        self.create_widgets()

    def get_buscar_nombre(self):
        return self.entry_nombre_busqueda.get()

    def get_coloca_id(self):
        return self.entry_coloca_id.get()

    def get_nombre_usuario(self):
        return self.entry_nombre_usuario.get()

    def get_apellido_usuario(self):
        return self.entry_apellido_usuario.get()

    def get_email_usuario(self):
        return self.entry_email_usuario.get()

    def get_dni_usuario(self):
        return self.entry_dni_usuario.get()

    def get_fecha_nacimiento_usuario(self):
        return self.entry_fecha_nacimiento_usuario.get()

    def get_username_usuario(self):
        return self.entry_username_usuario.get()

    def get_contraseña_usuario(self):
        return self.entry_contraseña_usuario.get()

    def get_admin_usuario(self):
        return self.entry_admin_usuario.get()

    def limpiar_resultado_busqueda(self):
        self.entry_resultado_busqueda.delete("1.0", "end")

    def set_nombre_usuario(self, nombre_usuario):
        self.entry_nombre_usuario.delete(0, "end")
        self.entry_nombre_usuario.insert(0, nombre_usuario)

    def set_apellido_usuario(self, apellido_usuario):
        self.entry_apellido_usuario.delete(0, "end")
        self.entry_apellido_usuario.insert(0, apellido_usuario)

    def set_email_usuario(self, email_usuario):
        self.entry_email_usuario.delete(0, "end")
        self.entry_email_usuario.insert(0, email_usuario)

    def set_dni_usuario(self, dni_usuario):
        self.entry_dni_usuario.delete(0, "end")
        self.entry_dni_usuario.insert(0, dni_usuario)

    def set_fecha_nacimiento_usuario(self, fecha_nacimiento_usuario):
        self.entry_fecha_nacimiento_usuario.delete(0, "end")
        self.entry_fecha_nacimiento_usuario.insert(0, fecha_nacimiento_usuario)

    def set_username_usuario(self, username_usuario):
        self.entry_username_usuario.delete(0, "end")
        self.entry_username_usuario.insert(0, username_usuario)

    def set_contraseña_usuario(self, contraseña_usuario):
        self.entry_contraseña_usuario.delete(0, "end")
        self.entry_contraseña_usuario.insert(0, contraseña_usuario)

    def set_admin_usuario(self, admin_usuario):
        self.entry_admin_usuario.delete(0, "end")
        self.entry_admin_usuario.insert(0, admin_usuario)

    def buscar_usuario(self):
        database = r"Cinemark.db"
            # create a database connection
        conn = create_connection(database)
        nombre = self.get_buscar_nombre()
        resultados = select_nombre_id_by_nombre(conn, nombre)
        if len(resultados) == 0:
            self.limpiar_resultado_busqueda()
            self.entry_resultado_busqueda.insert(
                "insert", f"ID -- nombre_usuario \n")
            self.entry_resultado_busqueda.insert(
                "insert", "\n")
            self.entry_resultado_busqueda.insert("insert", "No hay resultados")
        else:
            self.limpiar_resultado_busqueda()
            self.entry_resultado_busqueda.insert(
                "insert", f"ID -- nombre_usuario \n")
            for resultado in resultados:
                self.entry_resultado_busqueda.insert(
                    "insert", f" {resultado[0]} -- {resultado[1]} \n")

    def bdd_entrada(self):
        database = r"Cinemark.db"
        conn = create_connection(database)
        id = self.get_coloca_id()
        resultados = select_usuario_by_id(conn, id)
        print(resultados[0])
        return resultados[0]

    def entradas_to_list(self):
        nombre_usuario = self.get_nombre_usuario()
        apellido_usuario = self.get_apellido_usuario()
        email_usuario = self.get_email_usuario()
        dni_usuario = self.get_dni_usuario()
        fecha_nacimiento_usuario = self.get_fecha_nacimiento_usuario()
        username_usuario = self.get_username_usuario()
        contraseña_usuario = self.get_contraseña_usuario()
        admin_usuario = self.get_admin_usuario()
        return [nombre_usuario, apellido_usuario, email_usuario, dni_usuario, fecha_nacimiento_usuario, username_usuario, contraseña_usuario, admin_usuario]

    def comparar_nombre_usuario(self):
        return not self.bdd_entrada()[1] == self.entradas_to_list()[0]

    def comparar_apellido_usuario(self):
        return not self.bdd_entrada()[2] == self.entradas_to_list()[1]

    def comparar_email_usuario(self):
        return not self.bdd_entrada()[3] == self.entradas_to_list()[2]

    def comparar_dni_usuario(self):
        return not self.bdd_entrada()[4] == self.entradas_to_list()[3]

    def comparar_fecha_nacimiento_usuario(self):
        return not self.bdd_entrada()[5] == self.entradas_to_list()[4]

    def comparar_username_usuario(self):
        return not self.bdd_entrada()[6] == self.entradas_to_list()[5]

    def comparar_contraseña_usuario(self):
        return not self.bdd_entrada()[7] == self.entradas_to_list()[6]

    def comparar_admin_usuario(self):
        entrada_admin = "SI" if self.bdd_entrada()[8] == "admin" else "NO"
        return not entrada_admin == self.entradas_to_list()[7]

    def recibir_admin_usuario(self):
        return "admin" if self.get_admin_usuario() == "SI" else "usuario"

    def limpiar_entradas(self):
        self.entry_coloca_id.delete(0, "end")
        self.set_nombre_usuario("")
        self.set_apellido_usuario("")
        self.set_email_usuario("")
        self.set_dni_usuario("")
        self.set_fecha_nacimiento_usuario("")
        self.set_username_usuario("")
        self.set_contraseña_usuario("")
        self.set_admin_usuario("")

    def comparaciones(self):
        database = r"Cinemark.db"
            # create a database connection
        conn = create_connection(database)
        if self.comparar_nombre_usuario():
            update_atributo_usuario(conn, "nombre", (self.get_nombre_usuario(), self.get_coloca_id()))
            messagebox.showerror("Error", "Nombre actualizado")
        if self.comparar_apellido_usuario():
            update_atributo_usuario(conn, "apellido", (self.get_apellido_usuario(), self.get_coloca_id()))
            messagebox.showerror("Error", "Apellido actualizado")
        if self.comparar_email_usuario():
            update_atributo_usuario(conn, "email", (self.get_email_usuario(), self.get_coloca_id()))
            messagebox.showerror("Error", "Email actualizado")
        if self.comparar_dni_usuario():
            update_atributo_usuario(conn, "dni", (self.get_dni_usuario(), self.get_coloca_id()))
            messagebox.showerror("Error", "DNI actualizado")
        if self.comparar_fecha_nacimiento_usuario():
            update_atributo_usuario(conn, "fecha_nacimiento", (self.get_fecha_nacimiento_usuario(), self.get_coloca_id()))
            messagebox.showerror("Error", "Fecha de nacimiento actualizada")
        if self.comparar_username_usuario():
            update_atributo_usuario(conn, "username", (self.get_username_usuario(), self.get_coloca_id()))
            messagebox.showerror("Error", "Username actualizado")
        if self.comparar_contraseña_usuario():
            update_atributo_usuario(conn, "password", (self.get_contraseña_usuario(), self.get_coloca_id()))
            messagebox.showerror("Error", "Contraseña actualizada")
        if self.comparar_admin_usuario():
            update_atributo_usuario(conn, "tipo", (self.recibir_admin_usuario(), self.get_coloca_id()))
            messagebox.showerror("Error", "Admin actualizado")

    def cargar_datos_usuario(self):
        id = self.get_coloca_id()
        database = r"Cinemark.db"
            # create a database connection
        conn = create_connection(database)
        datos_usuario = select_usuario_by_id(conn, id)
        self.set_nombre_usuario(datos_usuario[0][1])
        self.set_apellido_usuario(datos_usuario[0][2])
        self.set_email_usuario(datos_usuario[0][3])
        self.set_dni_usuario(datos_usuario[0][4])
        self.set_fecha_nacimiento_usuario(datos_usuario[0][5])
        self.set_username_usuario(datos_usuario[0][6])
        self.set_contraseña_usuario(datos_usuario[0][7])
        if datos_usuario[0][8] == "admin":
            self.set_admin_usuario("SI")
        else:
            self.set_admin_usuario("NO")

    def create_widgets(self):
        canvas = Canvas(
            self,
            bg = "#FFFFFF",
            height = 634,
            width = 462,
            bd = 0,
            highlightthickness = 0,
            relief = "ridge"
            )

        canvas.place(x = 0, y = 0)
        canvas.create_text(
            131.0,
            5.0,
            anchor="nw",
            text="Cinemark",
            fill="#11AC0E",
            font=("Inter Bold", 20 * -1)
        )

        entry_image_1 = PhotoImage(
            file = self.relative_to_assets("entry_nombre_busqueda.png"))
        entry_bg_1 = canvas.create_image(
            238.0,
            49.5,
            image=entry_image_1
        )
        self.entry_nombre_busqueda = Entry(
            self,
            bd=0,
            bg="#D9D9D9",
            highlightthickness=0
        )
        self.entry_nombre_busqueda.place(
            x=162.0,
            y=39.0,
            width=152.0,
            height=19.0
        )
        # self.entry_nombre_busqueda.insert(0, " Buscar Nombre")

        # Button Buscar
        button_buscar = Button(
            self,
            text="Buscar",
            command=lambda: self.buscar_usuario(),
            relief="flat"
        )
        button_buscar.place(
            x=330.0,
            y=36.0,
            width=50.0,
            height=29.0
        )
        
        entry_image_2 = PhotoImage(
            file = self.relative_to_assets("entry_coloca_id.png"))
        entry_bg_2 = canvas.create_image(
            318.0,
            116.5,
            image=entry_image_2
        )
        self.entry_coloca_id = Entry(
            self,
            bd=0,
            bg="#D9D9D9",
            highlightthickness=0
        )
        self.entry_coloca_id.place(
            x=242.0,
            y=106.0,
            width=152.0,
            height=19.0
        )
        # self.entry_coloca_id.insert(0, "Coloca ID")

        # Button Cargar
        button_image_1 = PhotoImage(
            file = self.relative_to_assets("button_cargar.png"))
        button_cargar = Button(
            self,
            image=button_image_1,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.cargar_datos_usuario(),
            relief="flat"
        )
        button_cargar.place(
            x=262.0,
            y=136.0,
            width=111.0,
            height=29.0
        )

        canvas.create_text(
            18.0,
            35.0,
            anchor="nw",
            text="Buscar nombre: ",
            fill="#000000",
            font=("Inter Bold", 15 * -1)
        )

        canvas.create_text(
            266.0,
            79.0,
            anchor="nw",
            text="Coloca su ID:",
            fill="#000000",
            font=("Inter Bold", 15 * -1)
        )

        entry_image_3 = PhotoImage(
            file=self.relative_to_assets("entry_resultado_busqueda.png"))
        entry_bg_3 = canvas.create_image(
            113.5,
            127.0,
            image=entry_image_3
        )
        self.entry_resultado_busqueda = Text(
            self,
            bd=0,
            bg="#D9D9D9",
            highlightthickness=0
        )
        self.entry_resultado_busqueda.place(
            x=13.0,
            y=66.0,
            width=201.0,
            height=120.0
        )
        # self.entry_resultado_busqueda.insert("insert", "Busqueda")

        canvas.create_text(
            23.0,
            240.0,
            anchor="nw",
            text="Nombre ",
            fill="#000000",
            font=("Inter Bold", 15 * -1)
        )

        canvas.create_text(
            24.0,
            537.0,
            anchor="nw",
            text="Admin: ",
            fill="#000000",
            font=("Inter Bold", 15 * -1)
        )

        canvas.create_text(
            23.0,
            240.0,
            anchor="nw",
            text="Nombre: ",
            fill="#000000",
            font=("Inter Bold", 15 * -1)
        )

        canvas.create_text(
            21.0,
            466.0,
            anchor="nw",
            text="Contraseña: ",
            fill="#000000",
            font=("Inter Bold", 15 * -1)
        )

        canvas.create_text(
            21.0,
            407.0,
            anchor="nw",
            text="Nombre usuario:",
            fill="#000000",
            font=("Inter Bold", 15 * -1)
        )

        canvas.create_text(
            21.0,
            372.0,
            anchor="nw",
            text="Fecha Nacimiento: ",
            fill="#000000",
            font=("Inter Bold", 15 * -1)
        )

        canvas.create_text(
            23.0,
            306.0,
            anchor="nw",
            text="Email:",
            fill="#000000",
            font=("Inter Bold", 15 * -1)
        )

        canvas.create_text(
            21.0,
            339.0,
            anchor="nw",
            text="DNI: ",
            fill="#000000",
            font=("Inter Bold", 15 * -1)
        )

        canvas.create_text(
            23.0,
            273.0,
            anchor="nw",
            text="Apellido: ",
            fill="#000000",
            font=("Inter Bold", 15 * -1)
        )

        entry_image_4 = PhotoImage(
            file = self.relative_to_assets("entry_nombre_usuario.png"))
        entry_bg_4 = canvas.create_image(
            175.0,
            248.5,
            image=entry_image_4
        )
        self.entry_nombre_usuario = Entry(
            self,
            bd=0,
            bg="#D9D9D9",
            highlightthickness=0
        )
        self.entry_nombre_usuario.place(
            x=99.0,
            y=238.0,
            width=152.0,
            height=19.0
        )
        # self.entry_nombre_usuario.insert(0, "Nombre usuario")

        entry_image_5 = PhotoImage(
            file = self.relative_to_assets("entry_admin_usuario.png"))
        entry_bg_5 = canvas.create_image(
            116.0,
            540.5,
            image=entry_image_5
        )
        self.entry_admin_usuario = Entry(
            self,
            bd=0,
            bg="#D9D9D9",
            highlightthickness=0
        )
        self.entry_admin_usuario.place(
            x=89.0,
            y=530.0,
            width=54.0,
            height=19.0
        )
        # self.entry_admin_usuario.insert(0, " admin usuario")

        entry_image_6 = PhotoImage(
            file = self.relative_to_assets("entry_contraseña_usuario.png"))
        entry_bg_6 = canvas.create_image(
            201.0,
            472.5,
            image=entry_image_6
        )
        self.entry_contraseña_usuario = Entry(
            self,
            bd=0,
            bg="#D9D9D9",
            highlightthickness=0
        )
        self.entry_contraseña_usuario.place(
            x=125.0,
            y=462.0,
            width=152.0,
            height=19.0
        )
        # entry_6.insert(0, "Contraseña usuario")
        

        entry_image_7 = PhotoImage(
            file=self.relative_to_assets("entry_username_usuario.png"))
        entry_bg_7 = canvas.create_image(
            225.0,
            414.5,
            image=entry_image_7
        )
        self.entry_username_usuario = Entry(
            self,
            bd=0,
            bg="#D9D9D9",
            highlightthickness=0
        )
        self.entry_username_usuario.place(
            x=149.0,
            y=404.0,
            width=152.0,
            height=19.0
        )
        # self.entry_username_usuario.insert(0, "username usuario")

        entry_image_8 = PhotoImage(
            file=self.relative_to_assets("entry_fecha_nacimiento_usuario.png"))
        entry_bg_8 = canvas.create_image(
            225.0,
            379.5,
            image=entry_image_8
        )
        self.entry_fecha_nacimiento_usuario = Entry(
            self,
            bd=0,
            bg="#D9D9D9",
            highlightthickness=0
        )
        self.entry_fecha_nacimiento_usuario.place(
            x=159.0,
            y=369.0,
            width=132.0,
            height=19.0
        )
        # self.entry_fecha_nacimiento_usuario.insert(0, "Fecha Nacimiento usuario")

        entry_image_9 = PhotoImage(
            file=self.relative_to_assets("entry_dni_usuario.png"))
        entry_bg_9 = canvas.create_image(
            136.0,
            345.5,
            image=entry_image_9
        )
        self.entry_dni_usuario = Entry(
            self,
            bd=0,
            bg="#D9D9D9",
            highlightthickness=0
        )
        self.entry_dni_usuario.place(
            x=60.0,
            y=335.0,
            width=152.0,
            height=19.0
        )
        # self.entry_dni_usuario.insert(0, "DNI usuario")

        entry_image_10 = PhotoImage(
            file=self.relative_to_assets("entry_email_usuario.png"))
        entry_bg_10 = canvas.create_image(
            149.0,
            312.5,
            image=entry_image_10
        )
        self.entry_email_usuario = Entry(
            self,
            bd=0,
            bg="#D9D9D9",
            highlightthickness=0
        )
        self.entry_email_usuario.place(
            x=73.0,
            y=302.0,
            width=152.0,
            height=19.0
        )
        # self.entry_email_usuario.insert(0, "Email usuario")

        entry_image_11 = PhotoImage(
            file=self.relative_to_assets("entry_apellido_usuario.png"))
        entry_bg_11 = canvas.create_image(
            171.0,
            279.5,
            image=entry_image_11
        )
        self.entry_apellido_usuario = Entry(
            self,
            bd=0,
            bg="#D9D9D9",
            highlightthickness=0
        )
        self.entry_apellido_usuario.place(
            x=95.0,
            y=269.0,
            width=152.0,
            height=19.0
        )
        # self.entry_apellido_usuario.insert(0, "Apellido usuario")

        canvas.create_text(
            298.0,
            372.0,
            anchor="nw",
            text="(aaaa-mm-dd)",
            fill="#000000",
            font=("Inter Bold", 15 * -1)
        )

        canvas.create_text(
            160.0,
            532.0,
            anchor="nw",
            text="(SI-NO)",
            fill="#000000",
            font=("Inter Bold", 15 * -1)
        )

        # Boton confirmar
        button_image_2 = PhotoImage(
            file = self.relative_to_assets("button_confirmar.png"))
        button_confirmar = Button(
            self,
            image=button_image_2,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.comparaciones(),
            relief="flat"
        )
        button_confirmar.place(
            x=170.0,
            y=574.0,
            width=111.0,
            height=29.0
        )
        
        # Button Limpiar
        button_buscar = Button(
            self,
            text="Limpiar",
            command=lambda: self.limpiar_entradas(),
            relief="flat"
        )
        button_buscar.place(
            x=350.0,
            y=560.0,
            width=50.0,
            height=29.0
        )

        button_image_3 = PhotoImage(
            file = self.relative_to_assets("button_salir.png"))
        button_salir = Button(
            self,
            image=button_image_3,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.destroy(),
            relief="flat"
        )
        button_salir.place(
            x=14.0,
            y=580.0,
            width=35.0,
            height=35.0
        )

        canvas.create_text(
            23.0,
            429.0,
            anchor="nw",
            text="---------------------",
            fill="#000000",
            font=("Inter Bold", 25 * -1)
        )

        canvas.create_text(
            24.0,
            500.0,
            anchor="nw",
            text="---------------------",
            fill="#000000",
            font=("Inter Bold", 25 * -1)
        )

        canvas.create_text(
            11.0,
            206.0,
            anchor="nw",
            text="Modificar Usuario",
            fill="#000000",
            font=("Inter Bold", 15 * -1)
        )

        self.resizable(False, False)
        self.mainloop()


if __name__ == "__main__":
    # app = AdministracionModificarUsuario()
    pass
